/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    numberCursors: 1,
    selectionMode: "full",
    displayCharCount: true,
    displayPattern: "ch:ln/ct",
    cursorSeperator: " / ",
    rangeSeperator: "->",
    displayTotalLines: true,
    displayCursorLines: false,
    cursorLinePattern: "[lc]",
};
class CursorLocation extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.updateCursor = () => {
            let editor = this.getEditor();
            if (!this.cursorStatusBar) {
                this.cursorStatusBar = this.addStatusBarItem();
            }
            if (this.inPreviewMode()) {
                this.cursorStatusBar.setText("");
            }
            else if (editor) {
                let selections = editor.listSelections();
                let lineCount = editor.lineCount();
                if (selections && this.settings.numberCursors) {
                    let display;
                    if (selections.length == 1) {
                        display = this.cursorDisplay(selections[0], lineCount);
                    }
                    else if (selections.length <= this.settings.numberCursors) {
                        let cursorStrings = [];
                        selections.forEach((value) => {
                            cursorStrings.push(this.cursorDisplay(value, lineCount, true, true));
                        });
                        display = cursorStrings.join(this.settings.cursorSeperator);
                        if (/ct/.test(this.settings.displayPattern)) {
                            display += this.settings.cursorSeperator + lineCount;
                        }
                    }
                    else {
                        display = `${selections.length} cursors`;
                    }
                    if (editor.somethingSelected()) {
                        display += this.totalDisplay(editor, selections);
                    }
                    this.cursorStatusBar.setText(display);
                }
            }
        };
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading Cursor Location plugin");
            this.registerCodeMirror((cm) => {
                cm.on("cursorActivity", this.updateCursor);
            });
            this.registerEvent(this.app.workspace.on("active-leaf-change", this.updateCursor));
            this.registerEvent(this.app.workspace.on("layout-change", this.updateCursor));
            yield this.loadSettings();
            this.addSettingTab(new CursorLocationSettingTab(this.app, this));
            this.updateCursor();
        });
    }
    onunload() {
        console.log("unloading Cursor Location plugin");
        this.app.workspace.iterateCodeMirrors((cm) => {
            cm.off("cursorActivity", this.updateCursor);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    getEditor() {
        var _a;
        return (_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;
    }
    inPreviewMode() {
        var _a;
        return ((_a = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView)) === null || _a === void 0 ? void 0 : _a.getMode()) == "preview";
    }
    cursorString(cursor, totalCount, skipTotal = false) {
        let value = this.settings.displayPattern;
        let middlePattern = /^.*(ln|ch).*?ct.*?(ln|ch).*/i;
        let beginPattern = /^.*ct.*((ln|ch).*?(ln|ch).*)/i;
        let endPattern = /(.*(ln|ch).*?(ln|ch)).*?ct.*$/i;
        if (!skipTotal || middlePattern.test(value)) {
            value = value.replace("ct", totalCount.toString());
        }
        else if (beginPattern.test(value)) {
            value = value.replace(beginPattern, "$1");
        }
        else if (endPattern.test(value)) {
            value = value.replace(endPattern, "$1");
        }
        value = value
            .replace("ch", cursor.ch.toString())
            .replace("ln", (cursor.line + 1).toString());
        return value;
    }
    cursorDisplay(selection, totalCount, displayLines = false, skipTotal = false) {
        let value;
        if (this.settings.selectionMode == "begin") {
            value = this.cursorString(selection.anchor, totalCount, skipTotal);
        }
        else if (this.settings.selectionMode == "end") {
            value = this.cursorString(selection.head, totalCount, skipTotal);
        }
        else if (selection.anchor.ch == selection.head.ch &&
            selection.anchor.line == selection.head.line) {
            value = this.cursorString(selection.head, totalCount, skipTotal);
        }
        else {
            value =
                this.cursorString(selection.anchor, totalCount, true) +
                    this.settings.rangeSeperator +
                    this.cursorString(selection.head, totalCount, skipTotal);
        }
        if (displayLines && this.settings.displayCursorLines) {
            let numberLines = Math.abs(selection.anchor.line - selection.head.line) + 1;
            let cursorLinePattern = this.settings.cursorLinePattern;
            value += ` ${cursorLinePattern.replace("lc", numberLines.toString())}`;
        }
        return value;
    }
    totalDisplay(editor, selections) {
        let totalsDisplay = "";
        let textDisplay;
        let lineDisplay;
        if (this.settings.displayCharCount) {
            let textSelection = editor.getSelection();
            let textCount = textSelection.length - selections.length + 1;
            textDisplay = `${textCount} selected`;
        }
        if (this.settings.displayTotalLines) {
            let lineCount = 0;
            selections.forEach((selection) => {
                lineCount += Math.abs(selection.anchor.line - selection.head.line) + 1;
            });
            lineDisplay = `${lineCount} lines`;
        }
        if (this.settings.displayCharCount && this.settings.displayTotalLines) {
            totalsDisplay = ` (${textDisplay} / ${lineDisplay})`;
        }
        else if (this.settings.displayCharCount) {
            totalsDisplay = ` (${textDisplay})`;
        }
        else if (this.settings.displayTotalLines) {
            totalsDisplay = ` (${lineDisplay})`;
        }
        return totalsDisplay;
    }
}
class CursorLocationSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    resetComponent(elem, setting) {
        const value = DEFAULT_SETTINGS[setting];
        console.log(`resetting ${setting}: ${value}`);
        let component = elem.components[0];
        component.setValue(value);
        this.plugin.settings[setting] = value;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createDiv().createEl("h2", { text: "Cursor Information" });
        let cursorEl = containerEl.createDiv();
        cursorEl.createEl("h3", { text: "# of Cursors" });
        let numberCursors = new obsidian.Setting(cursorEl)
            .setName('Number of cursor positions that will display \
          in the status bar before switching to "N cursors".')
            .addText((text) => {
            var _a, _b;
            return text
                .setValue((_b = (_a = this.plugin.settings) === null || _a === void 0 ? void 0 : _a.numberCursors) === null || _b === void 0 ? void 0 : _b.toString())
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                let parsedValue = parseInt(value);
                if (!isNaN(parsedValue)) {
                    console.log(`updating numberCursors: ${parsedValue}`);
                    warningSection.setText("");
                    this.plugin.settings.numberCursors = parsedValue;
                    yield this.plugin.saveSettings();
                }
                else {
                    console.log("unable to update numberCursors, ", `unable to parse new value into integer: ${value}`);
                    warningSection.setText(`"${value}" is not a number, unable to save.`);
                }
            }));
        });
        let warningSection = cursorEl.createEl("p", {
            text: "",
            attr: { style: "color:red" },
        });
        new obsidian.Setting(cursorEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.numberCursors}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(numberCursors, "numberCursors");
            warningSection.setText("");
            yield this.plugin.saveSettings();
        })));
        let selectionEl = containerEl.createDiv();
        selectionEl.createEl("h3", { text: "Selecion Mode" });
        let selectionMode = new obsidian.Setting(selectionEl)
            .setName("Display just the beginning, just the end, or the full range of a selection.")
            .addDropdown((cb) => cb
            .addOption("begin", "Beginning")
            .addOption("end", "End")
            .addOption("full", "Full Selection")
            .setValue(this.plugin.settings.selectionMode || DEFAULT_SETTINGS.selectionMode)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log(`changing selectionMode: ${value}`);
            this.plugin.settings.selectionMode = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(selectionEl)
            .setName("Reset to default value of 'Full Selection'")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(selectionMode, "selectionMode");
            yield this.plugin.saveSettings();
        })));
        let displayCharCountEl = containerEl.createDiv();
        displayCharCountEl.createEl("h3", { text: "Display Character Count" });
        let displayCharCount = new obsidian.Setting(displayCharCountEl)
            .setName("Display the total number of characters selected.")
            .addToggle((cb) => cb
            .setValue(this.plugin.settings.displayCharCount != null
            ? this.plugin.settings.displayCharCount
            : DEFAULT_SETTINGS.displayCharCount)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings.displayCharCount != value) {
                console.log(`changing displayCharCount: ${value}`);
            }
            this.plugin.settings.displayCharCount = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(displayCharCountEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.displayCharCount}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(displayCharCount, "displayCharCount");
            yield this.plugin.saveSettings();
        })));
        let displayTotalLineCountEl = containerEl.createDiv();
        displayTotalLineCountEl.createEl("h3", { text: "Display Total Line Count" });
        let displayTotalLineCount = new obsidian.Setting(displayTotalLineCountEl)
            .setName("Display the total number of lines selected.")
            .addToggle((cb) => cb
            .setValue(this.plugin.settings.displayTotalLines != null
            ? this.plugin.settings.displayTotalLines
            : DEFAULT_SETTINGS.displayTotalLines)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings.displayTotalLines != value) {
                console.log(`changing displayTotalLines: ${value}`);
            }
            this.plugin.settings.displayTotalLines = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(displayTotalLineCountEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.displayTotalLines}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(displayTotalLineCount, "displayTotalLines");
            yield this.plugin.saveSettings();
        })));
        let displayPatternEl = containerEl.createDiv();
        displayPatternEl.createEl("h3", { text: "Individual Cursor Pattern" });
        let displayPattern = new obsidian.Setting(displayPatternEl)
            .setName("Pattern to display location information for each cursor, \
          `ch` is the column the cursor is at in the current line, \
          `ln` is the current line number, \
          `ct` is the total line numbers in the file (count). \
          If `ct` is the first or last of the three values, \
          it will be removed when displaying a range.")
            .addText((text) => {
            text.setValue(this.plugin.settings.displayPattern).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log(`changing displayPattern: ${value}`);
                this.plugin.settings.displayPattern = value.trim();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(displayPatternEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.displayPattern}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(displayPattern, "displayPattern");
            yield this.plugin.saveSettings();
        })));
        let cursorSeperatorEl = containerEl.createDiv();
        cursorSeperatorEl.createEl("h3", { text: "Cursor Seperator" });
        let cursorSeperator = new obsidian.Setting(cursorSeperatorEl)
            .setName("String to seperate multiple curor locations when \
          `# of Cursors` is greater than 1. Consecutive whitespace \
          is squashed to 1 space (per HTML rules).")
            .addText((text) => {
            text.setValue(this.plugin.settings.cursorSeperator).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log(`changing cursorSeperator: ${value}`);
                this.plugin.settings.cursorSeperator = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(cursorSeperatorEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.cursorSeperator}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(cursorSeperator, "cursorSeperator");
            yield this.plugin.saveSettings();
        })));
        let rangeSeperatorEl = containerEl.createDiv();
        rangeSeperatorEl.createEl("h3", { text: "Range Seperator" });
        let rangeSeperator = new obsidian.Setting(rangeSeperatorEl)
            .setName("String to seperate the beginning and end of a selection \
          when `Selection Mode` is set to `Full Selection`. \
          Consecutive whitespace is squashed to 1 space (per HTML rules)")
            .addText((text) => {
            text.setValue(this.plugin.settings.rangeSeperator).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log(`changing rangeSeperator: ${value}`);
                this.plugin.settings.rangeSeperator = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(rangeSeperatorEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.rangeSeperator}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(rangeSeperator, "rangeSeperator");
            yield this.plugin.saveSettings();
        })));
        let displayCursorLineCountEl = containerEl.createDiv();
        displayCursorLineCountEl.createEl("h3", { text: "Display Cursor Line Count" });
        let displayCursorLineCount = new obsidian.Setting(displayCursorLineCountEl)
            .setName("Display the number of lines selected by each cursor.")
            .addToggle((cb) => cb
            .setValue(this.plugin.settings.displayCursorLines != null
            ? this.plugin.settings.displayCursorLines
            : DEFAULT_SETTINGS.displayCursorLines)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (this.plugin.settings.displayCursorLines != value) {
                console.log(`changing displayCursorLines: ${value}`);
            }
            this.plugin.settings.displayCursorLines = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(displayCursorLineCountEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.displayCursorLines}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(displayCursorLineCount, "displayCursorLines");
            yield this.plugin.saveSettings();
        })));
        let cursorLinePatternEl = containerEl.createDiv();
        cursorLinePatternEl.createEl("h3", { text: "Cursor Line Pattern" });
        let cursorLinePattern = new obsidian.Setting(cursorLinePatternEl)
            .setName("Pattern to display number of highlighted lines for each cursor. \
          `lc` is the line count and will not be displayed if only one line \
          is selected or 'Display Cursor Line Count' setting is `false`. \
          Leading and trailing whitespace is trimmed.")
            .addText((text) => {
            text.setValue(this.plugin.settings.cursorLinePattern).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                console.log(`changing cursorLinePattern: ${value}`);
                this.plugin.settings.cursorLinePattern = value.trim();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(cursorLinePatternEl)
            .setName(`Reset to default value of '${DEFAULT_SETTINGS.cursorLinePattern}'`)
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.resetComponent(cursorLinePattern, "cursorLinePattern");
            yield this.plugin.saveSettings();
        })));
        containerEl.createDiv().createEl("h2", { text: "Reset All Settings" });
        const cursorLocationSettings = [
            { elem: numberCursors, setting: "numberCursors" },
            { elem: selectionMode, setting: "selectionMode" },
            { elem: displayCharCount, setting: "displayCharCount" },
            { elem: displayTotalLineCount, setting: "displayTotalLines" },
            { elem: displayPattern, setting: "displayPattern" },
            { elem: cursorSeperator, setting: "cursorSeperator" },
            { elem: rangeSeperator, setting: "rangeSeperator" },
            { elem: displayCursorLineCount, setting: "displayCursorLines" },
            { elem: cursorLinePattern, setting: "cursorLinePattern" },
        ];
        let resetAllEl = containerEl.createDiv();
        new obsidian.Setting(resetAllEl)
            .setName("Reset all settings to default values.")
            .addButton((cb) => cb.setButtonText("Reset").onClick(() => __awaiter(this, void 0, void 0, function* () {
            console.log("resetting all values to their defaults");
            cursorLocationSettings.forEach((setting) => {
                this.resetComponent(setting.elem, setting.setting);
            });
            warningSection.setText("");
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = CursorLocation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbIlBsdWdpbiIsIk1hcmtkb3duVmlldyIsIlBsdWdpblNldHRpbmdUYWIiLCJTZXR0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFB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
