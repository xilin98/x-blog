/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NinjaCursorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function waitForReflowComplete() {
  return new Promise((res) => {
    window.requestAnimationFrame(() => res(true));
  });
}
var NinjaCursorForWindow = class {
  constructor(app2, aw, ad, registerDomEvent) {
    this.lastPos = null;
    this.styleCount = 0;
    this.app = app2;
    this.bufferedWindow = aw;
    this.bufferedDocument = ad;
    this.wrapperElement = ad.createElement("div");
    this.wrapperElement.addClass("cursorWrapper");
    this.cursorElement = ad.createElement("span");
    this.wrapperElement.appendChild(this.cursorElement);
    ad.body.appendChild(this.wrapperElement);
    this.cursorElement.addClass("x-cursor");
    const styleRoot = this.wrapperElement;
    let datumTop = 0;
    let datumElement;
    let cursorVisibility = false;
    let processing = false;
    const moveCursor = async (e, noAnimate) => {
      if (processing) {
        return;
      }
      processing = true;
      await __moveCursor(e, noAnimate);
      processing = false;
    };
    const __moveCursor = async (e, noAnimate) => {
      if (e && e.target instanceof HTMLElement && (e.target.isContentEditable || e.target.tagName == "INPUT")) {
        datumElement = e.target;
        if (!cursorVisibility) {
          styleRoot.style.setProperty("--cursor-visibility", `visible`);
          cursorVisibility = true;
        }
      } else if (e != null) {
        if (cursorVisibility) {
          styleRoot.style.setProperty("--cursor-visibility", `hidden`);
          cursorVisibility = false;
        }
        return;
      }
      if (e && e.target instanceof HTMLElement) {
        datumElement = e.target;
      }
      await waitForReflowComplete();
      datumTop = datumElement.getBoundingClientRect().top;
      const selection = aw.getSelection();
      if (!selection) {
        console.log("Could not find selection");
        return;
      }
      if (selection.rangeCount == 0)
        return;
      const range = selection.getRangeAt(0);
      let rect = range == null ? void 0 : range.getBoundingClientRect();
      if (!rect) {
        console.log("Could not find range");
        return;
      }
      if (rect.x == 0 && rect.y == 0) {
        const textRange = ad.createRange();
        textRange.setStart(range.startContainer, range.startOffset);
        textRange.setEndAfter(range.startContainer);
        let textRect = textRange.getBoundingClientRect();
        if (textRect.x == 0 && textRect.y == 0) {
          textRange.setStart(range.endContainer, range.endOffset - 1);
          textRange.setEnd(range.endContainer, range.endOffset);
          const textRects = textRange.getClientRects();
          const tempRect = textRects.item(textRects.length - 1);
          if (!tempRect) {
            console.log("Could not found");
            return;
          }
          textRect = tempRect;
          textRect.x = tempRect.right;
          textRect.y = tempRect.bottom - tempRect.height;
        }
        if (textRect.x == 0 && textRect.y == 0) {
          return;
        }
        rect = textRect;
      }
      if (this.lastPos == null) {
        this.lastPos = rect;
        return;
      }
      if (this.lastPos.x == rect.x && this.lastPos.y == rect.y) {
        return;
      }
      this.styleCount = (this.styleCount + 1) % 2;
      const dx = rect.x - this.lastPos.x;
      const dy = this.lastPos.y - rect.y;
      const cursorDragAngle = Math.atan2(dx, dy) + Math.PI / 2;
      const cursorDragDistance = Math.sqrt(dx * dx + dy * dy);
      const cursorDragHeight = Math.abs(Math.sin(cursorDragAngle)) * 8 + Math.abs(Math.cos(cursorDragAngle)) * rect.height;
      const cursorDragWidth = cursorDragDistance;
      styleRoot.style.setProperty("--cursor-drag-height", `${cursorDragHeight}px`);
      styleRoot.style.setProperty("--cursor-drag-width", `${cursorDragWidth}px`);
      styleRoot.style.setProperty("--cursor-drag-angle", `${cursorDragAngle}rad`);
      styleRoot.style.setProperty("--cursor-height", `${rect.height}px`);
      styleRoot.style.setProperty("--cursor-x1", `${this.lastPos.x}px`);
      styleRoot.style.setProperty("--cursor-y1src", `${this.lastPos.y}px`);
      styleRoot.style.setProperty("--cursor-x2", `${rect.x}px`);
      styleRoot.style.setProperty("--cursor-y2src", `${rect.y}px`);
      styleRoot.style.setProperty("--cursor-offset-y", `${0}px`);
      if (noAnimate) {
        this.lastPos = rect;
        return;
      }
      this.cursorElement.removeClass("x-cursor0");
      this.cursorElement.removeClass("x-cursor1");
      datumTop = datumElement.getBoundingClientRect().top;
      aw.requestAnimationFrame((time) => {
        this.cursorElement.addClass(`x-cursor${this.styleCount}`);
        this.lastPos = rect;
      });
    };
    const supportVIMMode = true;
    const eventNames = ["keydown", "mousedown", "touchend", ...supportVIMMode ? ["keyup", "mouseup", "touchstart"] : []];
    for (const event of eventNames) {
      registerDomEvent(aw, event, (ev) => {
        moveCursor(ev);
      });
    }
    let triggered = false;
    const applyWheelScroll = (last) => {
      if (!triggered) {
        requestAnimationFrame(() => {
          if (datumElement) {
            const curTop = datumElement.getBoundingClientRect().top;
            const diff = curTop - datumTop;
            styleRoot.style.setProperty("--cursor-offset-y", `${diff}px`);
            if (last === false || last != diff) {
              requestAnimationFrame(() => applyWheelScroll(diff));
            } else if (last == diff) {
              moveCursor(void 0, true);
            }
          }
          triggered = false;
        });
        triggered = true;
      }
    };
    registerDomEvent(aw, "wheel", (e) => {
      applyWheelScroll(false);
    });
  }
  unload() {
    if (this.wrapperElement) {
      const doc = this.wrapperElement.doc;
      if (doc) {
        doc.body.removeChild(this.wrapperElement);
        this.wrapperElement = null;
      }
    }
  }
};
var NinjaCursorPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.Cursors = [];
  }
  async onload() {
    this.registerEvent(this.app.workspace.on("window-open", (win) => {
      console.log("Open by window-open");
      const exist = this.Cursors.find((e) => e.bufferedWindow == win.win);
      if (!exist) {
        const w2 = new NinjaCursorForWindow(app, win.win, win.doc, this.registerDomEvent.bind(this));
        this.Cursors.push(w2);
      }
    }));
    this.registerEvent(this.app.workspace.on("window-close", (win) => {
      const target = this.Cursors.find((e) => e.bufferedWindow == win.win);
      if (target) {
        target.unload();
        this.Cursors.remove(target);
      }
    }));
    console.log("Open by init");
    const w = new NinjaCursorForWindow(app, window, document, this.registerDomEvent.bind(this));
    this.Cursors.push(w);
  }
  onunload() {
    for (const v of this.Cursors) {
      v.unload();
    }
  }
  async loadSettings() {
  }
  async saveSettings() {
  }
};
